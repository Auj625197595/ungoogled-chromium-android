From: Wengling Chen <feiyu2817@gmail.com>
Date: Sat, 06 Jun 2020 21:32:57 -0400
Subject: add folder selection mode picker


---
 ui/android/java/src/org/chromium/ui/base/SelectFileDialog.java |  169 +++++++++-
 ui/shell_dialogs/select_file_dialog_android.cc                 |    6 
 2 files changed, 164 insertions(+), 11 deletions(-)

--- a/ui/android/java/src/org/chromium/ui/base/SelectFileDialog.java
+++ b/ui/android/java/src/org/chromium/ui/base/SelectFileDialog.java
@@ -15,10 +15,13 @@ import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.net.Uri;
 import android.os.Build;
+import android.os.storage.StorageManager;
 import android.provider.MediaStore;
+import android.provider.DocumentsContract;
 import android.text.TextUtils;
 import android.webkit.MimeTypeMap;
 
+import androidx.annotation.Nullable;
 import androidx.annotation.VisibleForTesting;
 
 import org.chromium.base.ContentUriUtils;
@@ -39,6 +42,8 @@ import org.chromium.ui.UiUtils;
 
 import java.io.File;
 import java.io.IOException;
+import java.lang.reflect.Array;
+import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -92,6 +97,7 @@ public class SelectFileDialog implements
 
     private final long mNativeSelectFileDialog;
     private List<String> mFileTypes;
+    private boolean mIsFolder;
     private boolean mCapture;
     private boolean mAllowMultiple;
     private Uri mCameraOutputUri;
@@ -153,9 +159,10 @@ public class SelectFileDialog implements
     @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
     @CalledByNative
     private void selectFile(
-            String[] fileTypes, boolean capture, boolean multiple, WindowAndroid window) {
+            String[] fileTypes, boolean capture, boolean multiple, boolean isFolder, WindowAndroid window) {
         mFileTypes = new ArrayList<String>(Arrays.asList(fileTypes));
         mCapture = capture;
+        mIsFolder = isFolder;
         mAllowMultiple = multiple;
         mWindowAndroid = (sOverrideWindowAndroid == null) ? window : sOverrideWindowAndroid;
 
@@ -247,6 +254,12 @@ public class SelectFileDialog implements
         RecordHistogram.recordEnumeratedHistogram("Android.SelectFileDialogScope",
                 determineSelectFileDialogScope(), SELECT_FILE_DIALOG_SCOPE_COUNT);
 
+        Intent folderSelector = null;
+        if (mIsFolder) {
+            folderSelector = new Intent(Intent.ACTION_OPEN_DOCUMENT_TREE);
+            folderSelector.addCategory(Intent.CATEGORY_DEFAULT);
+        }
+
         boolean hasCameraPermission = mWindowAndroid.hasPermission(Manifest.permission.CAMERA);
         Intent camcorder = null;
         if (mSupportsVideoCapture && hasCameraPermission) {
@@ -288,15 +301,22 @@ public class SelectFileDialog implements
         if (acceptsSingleType()) {
             // If one and only one category of accept type was specified (image, video, etc..),
             // then update the intent to specifically target that request.
-            if (shouldShowImageTypes()) {
+            if (shouldShowImageTypes() && !mIsFolder) {
+                Log.i("SelectFileDialog.java", "shouldShowImageTypes");
                 if (camera != null) extraIntents.add(camera);
                 getContentIntent.setType(IMAGE_TYPE + "/*");
-            } else if (shouldShowVideoTypes()) {
+            } else if (shouldShowVideoTypes() && !mIsFolder) {
+                Log.i("SelectFileDialog.java", "shouldShowVideoTypes");
                 if (camcorder != null) extraIntents.add(camcorder);
                 getContentIntent.setType(VIDEO_TYPE + "/*");
-            } else if (shouldShowAudioTypes()) {
+            } else if (shouldShowAudioTypes() && !mIsFolder) {
+                Log.i("SelectFileDialog.java", "shouldShowAudioTypes");
                 if (soundRecorder != null) extraIntents.add(soundRecorder);
                 getContentIntent.setType(AUDIO_TYPE + "/*");
+            } else if (mIsFolder) {
+                Log.i("SelectFileDialog.java", "mIsFolder, add(folderSelector)");
+                if (folderSelector != null) extraIntents.add(folderSelector);
+                getContentIntent.setType(ALL_TYPES);
             }
 
             // If any types are specified, then only accept openable files, as coercing
@@ -307,13 +327,20 @@ public class SelectFileDialog implements
         if (extraIntents.isEmpty()) {
             // We couldn't resolve a single accept type, so fallback to a generic chooser.
             getContentIntent.setType(ALL_TYPES);
-            if (camera != null) extraIntents.add(camera);
-            if (camcorder != null) extraIntents.add(camcorder);
-            if (soundRecorder != null) extraIntents.add(soundRecorder);
+            if (!mIsFolder) {
+                Log.i("SelectFileDialog.java", "!mIsFolder");
+                if (camera != null) extraIntents.add(camera);
+                if (camcorder != null) extraIntents.add(camcorder);
+                if (soundRecorder != null) extraIntents.add(soundRecorder);
+            } else {
+                Log.i("SelectFileDialog.java", "mIsFolder, add(folderSelector), 2");
+                if (folderSelector != null) extraIntents.add(folderSelector);
+            }
         }
 
         Intent chooser = new Intent(Intent.ACTION_CHOOSER);
         if (!extraIntents.isEmpty()) {
+            Log.i("SelectFileDialog.java", "EXTRA_INITIAL_INTENTS");
             chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS,
                     extraIntents.toArray(new Intent[] { }));
         }
@@ -802,16 +829,39 @@ public class SelectFileDialog implements
             String[] displayNames = new String[mUris.length];
             try {
                 for (int i = 0; i < mUris.length; i++) {
+                    // Convert content Uri to absolute file path if in folder selection mode
+                    if (mIsFolder) {
+                        Context context = ContextUtils.getApplicationContext();
+                        String path = FileUtil.getFullPathFromTreeUri(mUris[i], context);
+                        if (path != null) {
+                            mUris[i] = Uri.fromFile(new File(path));
+                            Log.i("SelectFileDialog.java", "mUris: %s, path: %s", mUris[i].toString(), path);
+                        } else
+                            Log.i("SelectFileDialog.java", "mUris: %s, path: %s", mUris[i].toString(), "NULL");
+                    }
+
                     // The selected files must be returned as a list of absolute paths. A MIUI 8.5
                     // device was observed to return a file:// URI instead, so convert if necessary.
                     // See https://crbug.com/752834 for context.
                     if (ContentResolver.SCHEME_FILE.equals(mUris[i].getScheme())) {
-                        mFilePaths[i] = mUris[i].getSchemeSpecificPart();
+                        String filePath = mUris[i].getSchemeSpecificPart();
+                        // Remove extra "//" if exists
+                        if (filePath.startsWith("//") && filePath.length() > 2)
+                          mFilePaths[i] = filePath.substring(2);
+                        Log.i("SelectFileDialog.java", "mFilePaths1: %s", mFilePaths[i]);
                     } else {
                         mFilePaths[i] = mUris[i].toString();
+                        Log.i("SelectFileDialog.java", "mFilePaths2: %s", mFilePaths[i]);
+                    }
+
+                    if (mIsFolder) {
+                        displayNames[i] = mFilePaths[i];
+                        Log.i("SelectFileDialog.java", "displayNames1: %s", displayNames[i]);
+                    } else {
+                        displayNames[i] = ContentUriUtils.getDisplayName(
+                                mUris[i], mContext, MediaStore.MediaColumns.DISPLAY_NAME);
+                        Log.i("SelectFileDialog.java", "displayNames2: %s", displayNames[i]);
                     }
-                    displayNames[i] = ContentUriUtils.getDisplayName(
-                            mUris[i], mContext, MediaStore.MediaColumns.DISPLAY_NAME);
                 }
             }  catch (SecurityException e) {
                 // Some third party apps will present themselves as being able
@@ -927,4 +977,103 @@ public class SelectFileDialog implements
         void onContactsSelected(
                 long nativeSelectFileDialogImpl, SelectFileDialog caller, String contacts);
     }
+
+    // The following code is from
+    // <a href="https://stackoverflow.com/questions/34927748#36162691">Stack Overflow</a>.
+    // Licensed under CC-BY-SA 3.0.
+    private static final class FileUtil {
+        private static final String[] PRIMARY_VOLUME_NAME = {"primary", "raw"};
+
+        @Nullable
+        static String getFullPathFromTreeUri(@Nullable final Uri treeUri, Context con) {
+            if (treeUri == null) return null;
+            String volumePath = getVolumePath(getVolumeIdFromTreeUri(treeUri),con);
+            if (volumePath == null)
+                Log.i("SelectFileDialog.java", "volumePath: %s", "NULL");
+            else
+                Log.i("SelectFileDialog.java", "volumePath: %s", volumePath);
+            if (volumePath == null) return File.separator;
+            if (volumePath.endsWith(File.separator))
+                volumePath = volumePath.substring(0, volumePath.length() - 1);
+
+            String documentPath = getDocumentPathFromTreeUri(treeUri);
+            if (documentPath == null || documentPath.equals(""))
+                Log.i("SelectFileDialog.java", "documentPath: %s", "NULL");
+            else
+                Log.i("SelectFileDialog.java", "documentPath: %s", documentPath);
+            if (volumePath.endsWith(File.separator))
+                volumePath = volumePath.substring(0, volumePath.length() - 1);
+            if (documentPath.endsWith(File.separator))
+                documentPath = documentPath.substring(0, documentPath.length() - 1);
+
+            if (documentPath.length() > 0) {
+                if (!documentPath.startsWith(volumePath)) {
+                    if (documentPath.startsWith(File.separator))
+                        return volumePath + documentPath;
+                    else
+                        return volumePath + File.separator + documentPath;
+                }
+                else
+                    return documentPath;
+            }
+            else return volumePath;
+        }
+
+        private static String getVolumePath(final String volumeId, Context context) {
+            Log.i("SelectFileDialog.java", "getVolumePath: volumeId: %s", volumeId);
+            try {
+                StorageManager mStorageManager =
+                        (StorageManager) context.getSystemService(Context.STORAGE_SERVICE);
+                Class<?> storageVolumeClazz = Class.forName("android.os.storage.StorageVolume");
+                Method getVolumeList = mStorageManager.getClass().getMethod("getVolumeList");
+                Method getUuid = storageVolumeClazz.getMethod("getUuid");
+                Method getPath = storageVolumeClazz.getMethod("getPath");
+                Method isPrimary = storageVolumeClazz.getMethod("isPrimary");
+                Object result = getVolumeList.invoke(mStorageManager);
+
+                final int length = Array.getLength(result);
+                Log.i("SelectFileDialog.java", "getVolumePath: length: %d", length);
+                for (int i = 0; i < length; i++) {
+                    Object storageVolumeElement = Array.get(result, i);
+                    String uuid = (String) getUuid.invoke(storageVolumeElement);
+                    Log.i("SelectFileDialog.java", "getVolumePath: uuid: %s", uuid);
+                    Boolean primary = (Boolean) isPrimary.invoke(storageVolumeElement);
+                    Log.i("SelectFileDialog.java", "getVolumePath: primary: %b", primary);
+
+                    // primary volume?
+                    for (String volume_name : PRIMARY_VOLUME_NAME) {
+                        if (primary && volume_name.equals(volumeId))
+                            return (String) getPath.invoke(storageVolumeElement);
+                    }
+
+                    // other volumes?
+                    if (uuid != null && uuid.equals(volumeId))
+                        return (String) getPath.invoke(storageVolumeElement);
+                }
+                // not found.
+                return null;
+            } catch (Exception ex) {
+                Log.e("SelectFileDialog.java", "getVolumePath: Exception: %s", ex.getMessage());
+                return null;
+            }
+        }
+
+        @TargetApi(Build.VERSION_CODES.LOLLIPOP)
+        private static String getVolumeIdFromTreeUri(final Uri treeUri) {
+            final String docId = DocumentsContract.getTreeDocumentId(treeUri);
+            Log.i("SelectFileDialog.java", "getVolumeIdFromTreeUri: docId: %s", docId);
+            final String[] split = docId.split(":");
+            if (split.length > 0) return split[0];
+            else return null;
+        }
+
+        @TargetApi(Build.VERSION_CODES.LOLLIPOP)
+        private static String getDocumentPathFromTreeUri(final Uri treeUri) {
+            final String docId = DocumentsContract.getTreeDocumentId(treeUri);
+            Log.i("SelectFileDialog.java", "getDocumentPathFromTreeUri: docId: %s", docId);
+            final String[] split = docId.split(":");
+            if ((split.length >= 2) && (split[1] != null)) return split[1];
+            else return File.separator;
+        }
+    }
 }
--- a/ui/shell_dialogs/select_file_dialog_android.cc
+++ b/ui/shell_dialogs/select_file_dialog_android.cc
@@ -135,8 +135,12 @@ void SelectFileDialogImpl::SelectFileImp
 
   bool accept_multiple_files = SelectFileDialog::SELECT_OPEN_MULTI_FILE == type;
 
+  bool is_folder = false;
+  if (type == SelectFileDialog::SELECT_EXISTING_FOLDER)
+      is_folder = true;
+
   Java_SelectFileDialog_selectFile(env, java_object_, accept_types_java,
-                                   accept_types.second, accept_multiple_files,
+                                   accept_types.second, accept_multiple_files, is_folder,
                                    owning_window->GetJavaObject());
 }
 
