From: Wengling Chen <feiyu2817@gmail.com>
Date: Fri, 10 Jan 2020 18:01:56 -0500
Subject: Fix build error caused by the removal of safe_browsing_prefs.h

---
 android_webview/browser/aw_browser_context.cc                                                                                                |    2 
 android_webview/browser/safe_browsing/aw_safe_browsing_blocking_page.cc                                                                      |   13 
 chrome/android/BUILD.gn                                                                                                                      |    1 
 chrome/android/java/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoController.java               |    6 
 chrome/android/java/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoUtils.java                    |    4 
 chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java                                                    |    8 
 chrome/android/java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingSettingsLauncher.java                                          |    5 
 chrome/android/java/src/org/chromium/chrome/browser/sync/settings/GoogleServicesSettings.java                                                |   30 -
 chrome/android/java/src/org/chromium/chrome/browser/sync/settings/SignInPreference.java                                                      |    6 
 chrome/android/java/src/org/chromium/chrome/browser/sync/settings/SyncAndServicesSettings.java                                               |   24 -
 chrome/browser/android/tab_web_contents_delegate_android.cc                                                                                  |    2 
 chrome/browser/preferences/BUILD.gn                                                                                                          |    1 
 chrome/browser/safe_browsing/BUILD.gn                                                                                                        |    1 
 chrome/browser/safe_browsing/android/BUILD.gn                                                                                                |    1 
 chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingBridge.java                              |   31 -
 chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/settings/RadioButtonGroupSafeBrowsingPreference.java |   37 --
 chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/settings/SecuritySettingsFragment.java               |   66 ---
 chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/settings/StandardProtectionSettingsFragment.java     |    8 
 weblayer/browser/browser_context_impl.cc                                                                                                     |    2 
 weblayer/browser/browser_process.cc                                                                                                          |   11 
 weblayer/browser/browser_process.h                                                                                                           |    4 
 weblayer/browser/content_browser_client_impl.cc                                                                                              |   20 -
 weblayer/browser/profile_impl.cc                                                                                                             |   16 
 weblayer/browser/safe_browsing/safe_browsing_blocking_page.cc                                                                                |    8 
 weblayer/browser/safe_browsing/safe_browsing_service.cc                                                                                      |  175 ----------
 25 files changed, 47 insertions(+), 435 deletions(-)

--- a/chrome/android/BUILD.gn
+++ b/chrome/android/BUILD.gn
@@ -334,7 +334,6 @@ android_library("chrome_java") {
     "//chrome/browser/preferences:java",
     "//chrome/browser/privacy:java",
     "//chrome/browser/profiles/android:java",
-    "//chrome/browser/safe_browsing/android:java",
     "//chrome/browser/safety_check/android:java",
     "//chrome/browser/settings:java",
     "//chrome/browser/share:java",
--- a/android_webview/browser/aw_browser_context.cc
+++ b/android_webview/browser/aw_browser_context.cc
@@ -233,7 +233,7 @@ base::FilePath AwBrowserContext::GetCont
 
 // static
 void AwBrowserContext::RegisterPrefs(PrefRegistrySimple* registry) {
-  safe_browsing::RegisterProfilePrefs(registry);
+  // safe_browsing::RegisterProfilePrefs(registry);
 
   // Register the Autocomplete Data Retention Policy pref.
   // The default value '0' represents the latest Chrome major version on which
--- a/android_webview/browser/safe_browsing/aw_safe_browsing_blocking_page.cc
+++ b/android_webview/browser/safe_browsing/aw_safe_browsing_blocking_page.cc
@@ -16,7 +16,6 @@
 #include "base/metrics/histogram_macros.h"
 #include "components/prefs/pref_service.h"
 #include "components/safe_browsing/content/browser/threat_details.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/common/safebrowsing_constants.h"
 #include "components/safe_browsing/core/features.h"
 #include "components/safe_browsing/core/triggers/trigger_manager.h"
@@ -102,16 +101,16 @@ AwSafeBrowsingBlockingPage* AwSafeBrowsi
   BaseSafeBrowsingErrorUI::SBErrorDisplayOptions display_options =
       BaseSafeBrowsingErrorUI::SBErrorDisplayOptions(
           IsMainPageLoadBlocked(unsafe_resources),
-          safe_browsing::IsExtendedReportingOptInAllowed(*pref_service),
+          false,
           browser_context->IsOffTheRecord(),
-          safe_browsing::IsExtendedReportingEnabled(*pref_service),
-          safe_browsing::IsExtendedReportingPolicyManaged(*pref_service),
-          safe_browsing::IsEnhancedProtectionEnabled(*pref_service),
-          pref_service->GetBoolean(::prefs::kSafeBrowsingProceedAnywayDisabled),
+          false,
+          false,
+          false,
+          false,
           false,  // should_open_links_in_new_tab
           false,  // always_show_back_to_safety
           false,  // is_enhanced_protection_message_enabled
-          safe_browsing::IsSafeBrowsingPolicyManaged(*pref_service),
+          false,
           "cpn_safe_browsing_wv");  // help_center_article_link
 
   ErrorUiType errorType =
--- a/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/SyncAndServicesSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/SyncAndServicesSettings.java
@@ -47,7 +47,6 @@ import org.chromium.chrome.browser.prefe
 import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
 import org.chromium.chrome.browser.privacy.settings.PrivacyPreferencesManager;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.safe_browsing.SafeBrowsingBridge;
 import org.chromium.chrome.browser.settings.ChromeManagedPreferenceDelegate;
 import org.chromium.chrome.browser.settings.SettingsActivity;
 import org.chromium.chrome.browser.signin.IdentityServicesProvider;
@@ -381,19 +380,9 @@ public class SyncAndServicesSettings ext
             PostTask.postTask(UiThreadTaskTraits.DEFAULT, this::updatePreferences);
         } else if (PREF_SEARCH_SUGGESTIONS.equals(key)) {
             mPrefService.setBoolean(Pref.SEARCH_SUGGEST_ENABLED, (boolean) newValue);
-        } else if (PREF_SAFE_BROWSING.equals(key)) {
-            assert !mIsSecurityPreferenceRemoved;
-            mPrefService.setBoolean(Pref.SAFE_BROWSING_ENABLED, (boolean) newValue);
-            // Toggling the safe browsing preference impacts the leak detection and the
-            // safe browsing reporting preferences as well.
-            PostTask.postTask(UiThreadTaskTraits.DEFAULT,
-                    this::updateLeakDetectionAndSafeBrowsingReportingPreferences);
         } else if (PREF_PASSWORD_LEAK_DETECTION.equals(key)) {
             assert !mIsSecurityPreferenceRemoved;
             mPrefService.setBoolean(Pref.PASSWORD_LEAK_DETECTION_ENABLED, (boolean) newValue);
-        } else if (PREF_SAFE_BROWSING_SCOUT_REPORTING.equals(key)) {
-            assert !mIsSecurityPreferenceRemoved;
-            SafeBrowsingBridge.setSafeBrowsingExtendedReportingEnabled((boolean) newValue);
         } else if (PREF_NAVIGATION_ERROR.equals(key)) {
             mPrefService.setBoolean(Pref.ALTERNATE_ERROR_PAGES_ENABLED, (boolean) newValue);
         } else if (PREF_USAGE_AND_CRASH_REPORTING.equals(key)) {
@@ -573,10 +562,6 @@ public class SyncAndServicesSettings ext
 
         mSearchSuggestions.setChecked(mPrefService.getBoolean(Pref.SEARCH_SUGGEST_ENABLED));
         mNavigationError.setChecked(mPrefService.getBoolean(Pref.ALTERNATE_ERROR_PAGES_ENABLED));
-        if (!mIsSecurityPreferenceRemoved) {
-            mSafeBrowsing.setChecked(mPrefService.getBoolean(Pref.SAFE_BROWSING_ENABLED));
-            updateLeakDetectionAndSafeBrowsingReportingPreferences();
-        }
 
         mUsageAndCrashReporting.setChecked(
                 mPrivacyPrefManager.isUsageAndCrashReportingPermittedByUser());
@@ -645,10 +630,9 @@ public class SyncAndServicesSettings ext
      */
     private void updateLeakDetectionAndSafeBrowsingReportingPreferences() {
         assert !mIsSecurityPreferenceRemoved;
-        boolean safe_browsing_enabled = mPrefService.getBoolean(Pref.SAFE_BROWSING_ENABLED);
+        boolean safe_browsing_enabled = false;
         mSafeBrowsingReporting.setEnabled(safe_browsing_enabled);
-        mSafeBrowsingReporting.setChecked(safe_browsing_enabled
-                && SafeBrowsingBridge.isSafeBrowsingExtendedReportingEnabled());
+        mSafeBrowsingReporting.setChecked(safe_browsing_enabled);
 
         boolean has_token_for_leak_check = PasswordUIView.hasAccountForLeakCheckRequest();
         boolean leak_detection_enabled =
@@ -676,10 +660,10 @@ public class SyncAndServicesSettings ext
                 return mPrefService.isManagedPreference(Pref.SEARCH_SUGGEST_ENABLED);
             }
             if (PREF_SAFE_BROWSING_SCOUT_REPORTING.equals(key)) {
-                return SafeBrowsingBridge.isSafeBrowsingExtendedReportingManaged();
+                return false;
             }
             if (PREF_SAFE_BROWSING.equals(key)) {
-                return mPrefService.isManagedPreference(Pref.SAFE_BROWSING_ENABLED);
+                return false;
             }
             if (PREF_PASSWORD_LEAK_DETECTION.equals(key)) {
                 return mPrefService.isManagedPreference(Pref.PASSWORD_LEAK_DETECTION_ENABLED);
--- a/weblayer/browser/browser_context_impl.cc
+++ b/weblayer/browser/browser_context_impl.cc
@@ -18,7 +18,6 @@
 #include "components/prefs/json_pref_store.h"
 #include "components/prefs/pref_service.h"
 #include "components/prefs/pref_service_factory.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/security_interstitials/content/stateful_ssl_host_state_delegate.h"
 #include "components/site_isolation/pref_names.h"
 #include "components/site_isolation/site_isolation_policy.h"
@@ -265,7 +264,6 @@ void BrowserContextImpl::RegisterPrefs(
 
   StatefulSSLHostStateDelegate::RegisterProfilePrefs(pref_registry);
   HostContentSettingsMap::RegisterProfilePrefs(pref_registry);
-  safe_browsing::RegisterProfilePrefs(pref_registry);
   language::LanguagePrefs::RegisterProfilePrefs(pref_registry);
   translate::TranslatePrefs::RegisterProfilePrefs(pref_registry);
   blocked_content::SafeBrowsingTriggeredPopupBlocker::RegisterProfilePrefs(
--- a/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/GoogleServicesSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/GoogleServicesSettings.java
@@ -28,7 +28,6 @@ import org.chromium.chrome.browser.prefe
 import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
 import org.chromium.chrome.browser.privacy.settings.PrivacyPreferencesManager;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.safe_browsing.SafeBrowsingBridge;
 import org.chromium.chrome.browser.settings.ChromeManagedPreferenceDelegate;
 import org.chromium.chrome.browser.signin.IdentityServicesProvider;
 import org.chromium.chrome.browser.signin.SignOutDialogFragment;
@@ -198,7 +197,6 @@ public class GoogleServicesSettings
                     identityManager.getPrimaryAccountInfo(ConsentLevel.NOT_REQUIRED) != null
                     && !((boolean) newValue);
             if (!shouldSignUserOut) {
-                mPrefService.setBoolean(Pref.SIGNIN_ALLOWED, (boolean) newValue);
                 return true;
             }
 
@@ -209,7 +207,6 @@ public class GoogleServicesSettings
                 IdentityServicesProvider.get()
                         .getSigninManager(Profile.getLastUsedRegularProfile())
                         .signOut(SignoutReason.USER_CLICKED_SIGNOUT_SETTINGS, null, false);
-                mPrefService.setBoolean(Pref.SIGNIN_ALLOWED, false);
                 return true;
             }
 
@@ -222,19 +219,9 @@ public class GoogleServicesSettings
             return false;
         } else if (PREF_SEARCH_SUGGESTIONS.equals(key)) {
             mPrefService.setBoolean(Pref.SEARCH_SUGGEST_ENABLED, (boolean) newValue);
-        } else if (PREF_SAFE_BROWSING.equals(key)) {
-            assert !mIsSecurityPreferenceRemoved;
-            mPrefService.setBoolean(Pref.SAFE_BROWSING_ENABLED, (boolean) newValue);
-            // Toggling the safe browsing preference impacts the leak detection and the
-            // safe browsing reporting preferences as well.
-            PostTask.postTask(UiThreadTaskTraits.DEFAULT,
-                    this::updateLeakDetectionAndSafeBrowsingReportingPreferences);
         } else if (PREF_PASSWORD_LEAK_DETECTION.equals(key)) {
             assert !mIsSecurityPreferenceRemoved;
             mPrefService.setBoolean(Pref.PASSWORD_LEAK_DETECTION_ENABLED, (boolean) newValue);
-        } else if (PREF_SAFE_BROWSING_SCOUT_REPORTING.equals(key)) {
-            assert !mIsSecurityPreferenceRemoved;
-            SafeBrowsingBridge.setSafeBrowsingExtendedReportingEnabled((boolean) newValue);
         } else if (PREF_NAVIGATION_ERROR.equals(key)) {
             mPrefService.setBoolean(Pref.ALTERNATE_ERROR_PAGES_ENABLED, (boolean) newValue);
         } else if (PREF_USAGE_AND_CRASH_REPORTING.equals(key)) {
@@ -254,13 +241,8 @@ public class GoogleServicesSettings
     }
 
     private void updatePreferences() {
-        mAllowSignin.setChecked(mPrefService.getBoolean(Pref.SIGNIN_ALLOWED));
         mSearchSuggestions.setChecked(mPrefService.getBoolean(Pref.SEARCH_SUGGEST_ENABLED));
         mNavigationError.setChecked(mPrefService.getBoolean(Pref.ALTERNATE_ERROR_PAGES_ENABLED));
-        if (!mIsSecurityPreferenceRemoved) {
-            mSafeBrowsing.setChecked(mPrefService.getBoolean(Pref.SAFE_BROWSING_ENABLED));
-            updateLeakDetectionAndSafeBrowsingReportingPreferences();
-        }
 
         mUsageAndCrashReporting.setChecked(
                 mPrivacyPrefManager.isUsageAndCrashReportingPermittedByUser());
@@ -285,10 +267,9 @@ public class GoogleServicesSettings
      */
     private void updateLeakDetectionAndSafeBrowsingReportingPreferences() {
         assert !mIsSecurityPreferenceRemoved;
-        boolean safe_browsing_enabled = mPrefService.getBoolean(Pref.SAFE_BROWSING_ENABLED);
+        boolean safe_browsing_enabled = false;
         mSafeBrowsingReporting.setEnabled(safe_browsing_enabled);
-        mSafeBrowsingReporting.setChecked(safe_browsing_enabled
-                && SafeBrowsingBridge.isSafeBrowsingExtendedReportingEnabled());
+        mSafeBrowsingReporting.setChecked(safe_browsing_enabled);
 
         boolean has_token_for_leak_check = PasswordUIView.hasAccountForLeakCheckRequest();
         boolean leak_detection_enabled =
@@ -310,7 +291,7 @@ public class GoogleServicesSettings
         return preference -> {
             String key = preference.getKey();
             if (PREF_ALLOW_SIGNIN.equals(key)) {
-                return mPrefService.isManagedPreference(Pref.SIGNIN_ALLOWED);
+                return false;
             }
             if (PREF_NAVIGATION_ERROR.equals(key)) {
                 return mPrefService.isManagedPreference(Pref.ALTERNATE_ERROR_PAGES_ENABLED);
@@ -319,10 +300,10 @@ public class GoogleServicesSettings
                 return mPrefService.isManagedPreference(Pref.SEARCH_SUGGEST_ENABLED);
             }
             if (PREF_SAFE_BROWSING_SCOUT_REPORTING.equals(key)) {
-                return SafeBrowsingBridge.isSafeBrowsingExtendedReportingManaged();
+                return false;
             }
             if (PREF_SAFE_BROWSING.equals(key)) {
-                return mPrefService.isManagedPreference(Pref.SAFE_BROWSING_ENABLED);
+                return false;
             }
             if (PREF_PASSWORD_LEAK_DETECTION.equals(key)) {
                 return mPrefService.isManagedPreference(Pref.PASSWORD_LEAK_DETECTION_ENABLED);
@@ -388,7 +369,6 @@ public class GoogleServicesSettings
                             }
                         },
                         forceWipeUserData);
-        mPrefService.setBoolean(Pref.SIGNIN_ALLOWED, false);
         updatePreferences();
     }
 }
--- a/chrome/browser/safe_browsing/BUILD.gn
+++ b/chrome/browser/safe_browsing/BUILD.gn
@@ -283,7 +283,6 @@ static_library("safe_browsing") {
         "telemetry/android/android_telemetry_service.h",
       ]
       deps += [
-        "//chrome/browser/safe_browsing/android",
         "//components/safe_browsing:buildflags",
         "//components/safe_browsing/android:safe_browsing_mobile",
       ]
--- a/chrome/browser/preferences/BUILD.gn
+++ b/chrome/browser/preferences/BUILD.gn
@@ -36,7 +36,6 @@ java_cpp_strings("java_pref_names_srcjar
     "//components/offline_pages/core/prefetch/prefetch_prefs.cc",
     "//components/password_manager/core/common/password_manager_pref_names.cc",
     "//components/payments/core/payment_prefs.cc",
-    "//components/safe_browsing/core/common/safe_browsing_prefs.cc",
     "//components/signin/public/base/signin_pref_names.cc",
     "//components/translate/core/browser/translate_pref_names.cc",
   ]
--- a/chrome/browser/android/tab_web_contents_delegate_android.cc
+++ b/chrome/browser/android/tab_web_contents_delegate_android.cc
@@ -176,8 +176,6 @@ void TabWebContentsDelegateAndroid::Port
   InfoBarService::CreateForWebContents(portal_contents);
   PrefsTabHelper::CreateForWebContents(portal_contents);
   DataReductionProxyTabHelper::CreateForWebContents(portal_contents);
-  safe_browsing::SafeBrowsingNavigationObserver::MaybeCreateForWebContents(
-      portal_contents);
 }
 
 void TabWebContentsDelegateAndroid::RunFileChooser(
--- a/weblayer/browser/content_browser_client_impl.cc
+++ b/weblayer/browser/content_browser_client_impl.cc
@@ -404,8 +404,7 @@ ContentBrowserClientImpl::CreateURLLoade
 #if defined(OS_ANDROID)
     BrowserContextImpl* browser_context_impl =
         static_cast<BrowserContextImpl*>(browser_context);
-    bool is_safe_browsing_enabled = safe_browsing::IsSafeBrowsingEnabled(
-        *browser_context_impl->pref_service());
+    bool is_safe_browsing_enabled = false;
 
     if (is_safe_browsing_enabled) {
       bool is_real_time_lookup_enabled =
@@ -708,18 +707,6 @@ ContentBrowserClientImpl::CreateThrottle
 
 #if defined(OS_ANDROID)
   if (handle->IsInMainFrame()) {
-    if (base::FeatureList::IsEnabled(features::kWebLayerSafeBrowsing) &&
-        IsSafebrowsingSupported()) {
-      throttles.push_back(
-          GetSafeBrowsingService()->CreateSafeBrowsingNavigationThrottle(
-              handle));
-      if (handle->IsInMainFrame()) {
-        throttles.push_back(
-            navigation_interception::InterceptNavigationDelegate::
-                CreateThrottleFor(
-                    handle, navigation_interception::SynchronyMode::kAsync));
-      }
-    }
   }
 #endif
   return throttles;
@@ -770,11 +757,6 @@ void ContentBrowserClientImpl::ExposeInt
       };
   registry->AddInterface(base::BindRepeating(create_spellcheck_host),
                          content::GetUIThreadTaskRunner({}));
-
-  if (base::FeatureList::IsEnabled(features::kWebLayerSafeBrowsing) &&
-      IsSafebrowsingSupported()) {
-    GetSafeBrowsingService()->AddInterface(registry, render_process_host);
-  }
 #endif  // defined(OS_ANDROID)
 }
 
--- a/weblayer/browser/safe_browsing/safe_browsing_blocking_page.cc
+++ b/weblayer/browser/safe_browsing/safe_browsing_blocking_page.cc
@@ -51,12 +51,8 @@ SafeBrowsingBlockingPage* SafeBrowsingBl
   security_interstitials::BaseSafeBrowsingErrorUI::SBErrorDisplayOptions
       display_options =
           BaseBlockingPage::CreateDefaultDisplayOptions(unsafe_resources);
-  display_options.is_extended_reporting_opt_in_allowed =
-      safe_browsing::IsExtendedReportingOptInAllowed(
-          *(browser_context->pref_service()));
-  display_options.is_extended_reporting_enabled =
-      safe_browsing::IsExtendedReportingEnabled(
-          *(browser_context->pref_service()));
+  display_options.is_extended_reporting_opt_in_allowed = false;
+  display_options.is_extended_reporting_enabled = false;
 
   // TODO(crbug.com/1080748): Set settings_page_helper once enhanced protection
   // is supported on weblayer.
--- a/weblayer/browser/safe_browsing/safe_browsing_service.cc
+++ b/weblayer/browser/safe_browsing/safe_browsing_service.cc
@@ -2,8 +2,6 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#include "weblayer/browser/safe_browsing/safe_browsing_service.h"
-
 #include "base/bind.h"
 #include "base/path_service.h"
 #include "components/prefs/pref_service.h"
@@ -12,7 +10,6 @@
 #include "components/safe_browsing/content/browser/browser_url_loader_throttle.h"
 #include "components/safe_browsing/content/browser/mojo_safe_browsing_impl.h"
 #include "components/safe_browsing/core/browser/safe_browsing_network_context.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/safe_browsing/core/realtime/url_lookup_service.h"
 #include "content/public/browser/browser_context.h"
 #include "content/public/browser/browser_task_traits.h"
@@ -57,10 +54,7 @@ void MaybeCreateSafeBrowsing(
   if (!render_process_host)
     return;
 
-  bool is_safe_browsing_enabled = safe_browsing::IsSafeBrowsingEnabled(
-      *static_cast<BrowserContextImpl*>(
-           render_process_host->GetBrowserContext())
-           ->pref_service());
+  bool is_safe_browsing_enabled = false;
 
   if (!is_safe_browsing_enabled)
     return;
@@ -74,171 +68,4 @@ void MaybeCreateSafeBrowsing(
 
 }  // namespace
 
-SafeBrowsingService::SafeBrowsingService(const std::string& user_agent)
-    : user_agent_(user_agent) {}
-
-SafeBrowsingService::~SafeBrowsingService() = default;
-
-void SafeBrowsingService::Initialize() {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-
-  if (network_context_) {
-    // already initialized
-    return;
-  }
-
-  safe_browsing_api_handler_.reset(
-      new safe_browsing::SafeBrowsingApiHandlerBridge());
-  safe_browsing::SafeBrowsingApiHandler::SetInstance(
-      safe_browsing_api_handler_.get());
-
-  base::FilePath user_data_dir;
-  bool result =
-      base::PathService::Get(base::DIR_ANDROID_APP_DATA, &user_data_dir);
-  DCHECK(result);
-
-  // safebrowsing network context needs to be created on the UI thread.
-  network_context_ =
-      std::make_unique<safe_browsing::SafeBrowsingNetworkContext>(
-          user_data_dir,
-          base::BindRepeating(CreateDefaultNetworkContextParams, user_agent_));
-
-  CreateSafeBrowsingUIManager();
-}
-
-std::unique_ptr<blink::URLLoaderThrottle>
-SafeBrowsingService::CreateURLLoaderThrottle(
-    const base::RepeatingCallback<content::WebContents*()>& wc_getter,
-    int frame_tree_node_id,
-    safe_browsing::RealTimeUrlLookupServiceBase* url_lookup_service) {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-
-  return safe_browsing::BrowserURLLoaderThrottle::Create(
-      base::BindOnce(
-          [](SafeBrowsingService* sb_service) {
-            return sb_service->GetSafeBrowsingUrlCheckerDelegate();
-          },
-          base::Unretained(this)),
-      wc_getter, frame_tree_node_id,
-      url_lookup_service ? url_lookup_service->GetWeakPtr() : nullptr);
-}
-
-std::unique_ptr<content::NavigationThrottle>
-SafeBrowsingService::CreateSafeBrowsingNavigationThrottle(
-    content::NavigationHandle* handle) {
-  return std::make_unique<SafeBrowsingNavigationThrottle>(
-      handle, GetSafeBrowsingUIManager());
-}
-
-scoped_refptr<safe_browsing::UrlCheckerDelegate>
-SafeBrowsingService::GetSafeBrowsingUrlCheckerDelegate() {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::IO);
-
-  if (!safe_browsing_url_checker_delegate_) {
-    safe_browsing_url_checker_delegate_ = new UrlCheckerDelegateImpl(
-        GetSafeBrowsingDBManager(), GetSafeBrowsingUIManager());
-  }
-
-  return safe_browsing_url_checker_delegate_;
-}
-
-safe_browsing::RemoteSafeBrowsingDatabaseManager*
-SafeBrowsingService::GetSafeBrowsingDBManager() {
-  if (!safe_browsing_db_manager_) {
-    CreateAndStartSafeBrowsingDBManager();
-  }
-  return safe_browsing_db_manager_.get();
-}
-
-SafeBrowsingUIManager* SafeBrowsingService::GetSafeBrowsingUIManager() {
-  return ui_manager_.get();
-}
-
-void SafeBrowsingService::CreateSafeBrowsingUIManager() {
-  DCHECK(!ui_manager_);
-  ui_manager_ = new SafeBrowsingUIManager(this);
-}
-
-void SafeBrowsingService::CreateAndStartSafeBrowsingDBManager() {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::IO);
-  DCHECK(!safe_browsing_db_manager_);
-
-  safe_browsing_db_manager_ =
-      new safe_browsing::RemoteSafeBrowsingDatabaseManager();
-
-  // V4ProtocolConfig is not used. Just create one with empty values.
-  safe_browsing::V4ProtocolConfig config("", false, "", "");
-  safe_browsing_db_manager_->StartOnIOThread(GetURLLoaderFactoryOnIOThread(),
-                                             config);
-}
-
-scoped_refptr<network::SharedURLLoaderFactory>
-SafeBrowsingService::GetURLLoaderFactoryOnIOThread() {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::IO);
-  if (!shared_url_loader_factory_on_io_) {
-    content::GetUIThreadTaskRunner({})->PostTask(
-        FROM_HERE,
-        base::BindOnce(&SafeBrowsingService::CreateURLLoaderFactoryForIO,
-                       base::Unretained(this),
-                       url_loader_factory_on_io_.BindNewPipeAndPassReceiver()));
-    shared_url_loader_factory_on_io_ =
-        base::MakeRefCounted<network::WeakWrapperSharedURLLoaderFactory>(
-            url_loader_factory_on_io_.get());
-  }
-  return shared_url_loader_factory_on_io_;
-}
-
-void SafeBrowsingService::CreateURLLoaderFactoryForIO(
-    mojo::PendingReceiver<network::mojom::URLLoaderFactory> receiver) {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-  auto url_loader_factory_params =
-      network::mojom::URLLoaderFactoryParams::New();
-  url_loader_factory_params->process_id = network::mojom::kBrowserProcessId;
-  url_loader_factory_params->is_corb_enabled = false;
-  network_context_->GetNetworkContext()->CreateURLLoaderFactory(
-      std::move(receiver), std::move(url_loader_factory_params));
-}
-
-void SafeBrowsingService::AddInterface(
-    service_manager::BinderRegistry* registry,
-    content::RenderProcessHost* render_process_host) {
-  content::ResourceContext* resource_context =
-      render_process_host->GetBrowserContext()->GetResourceContext();
-  registry->AddInterface(
-      base::BindRepeating(
-          &MaybeCreateSafeBrowsing, render_process_host->GetID(),
-          resource_context,
-          base::BindRepeating(
-              &SafeBrowsingService::GetSafeBrowsingUrlCheckerDelegate,
-              base::Unretained(this))),
-      content::GetUIThreadTaskRunner({}));
-}
-
-void SafeBrowsingService::StopDBManager() {
-  content::GetIOThreadTaskRunner({})->PostTask(
-      FROM_HERE, base::BindOnce(&SafeBrowsingService::StopDBManagerOnIOThread,
-                                base::Unretained(this)));
-}
-
-void SafeBrowsingService::StopDBManagerOnIOThread() {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::IO);
-  if (safe_browsing_db_manager_) {
-    safe_browsing_db_manager_->StopOnIOThread(true /*shutdown*/);
-    safe_browsing_db_manager_.reset();
-  }
-}
-
-network::mojom::NetworkContext* SafeBrowsingService::GetNetworkContext() {
-  if (!network_context_)
-    return nullptr;
-  return network_context_->GetNetworkContext();
-}
-
-scoped_refptr<network::SharedURLLoaderFactory>
-SafeBrowsingService::GetURLLoaderFactory() {
-  if (!network_context_)
-    return nullptr;
-  return network_context_->GetURLLoaderFactory();
-}
-
 }  // namespace weblayer
--- a/weblayer/browser/profile_impl.cc
+++ b/weblayer/browser/profile_impl.cc
@@ -49,7 +49,6 @@
 #include "base/android/jni_array.h"
 #include "base/android/jni_string.h"
 #include "base/android/scoped_java_ref.h"
-#include "components/safe_browsing/core/common/safe_browsing_prefs.h"
 #include "components/unified_consent/pref_names.h"
 #include "ui/gfx/android/java_bitmap.h"
 #include "weblayer/browser/browser_process.h"
@@ -590,11 +589,6 @@ void ProfileImpl::SetBooleanSetting(Sett
   auto* pref_service = GetBrowserContext()->pref_service();
   switch (type) {
     case SettingType::BASIC_SAFE_BROWSING_ENABLED:
-#if defined(OS_ANDROID)
-      safe_browsing::SetSafeBrowsingState(
-          pref_service, value ? safe_browsing::STANDARD_PROTECTION
-                              : safe_browsing::NO_SAFE_BROWSING);
-#endif
       break;
     case SettingType::UKM_ENABLED: {
 #if defined(OS_ANDROID)
@@ -609,10 +603,6 @@ void ProfileImpl::SetBooleanSetting(Sett
       break;
     }
     case SettingType::EXTENDED_REPORTING_SAFE_BROWSING_ENABLED:
-#if defined(OS_ANDROID)
-      pref_service->SetBoolean(::prefs::kSafeBrowsingScoutReportingEnabled,
-                               value);
-#endif
       break;
     case SettingType::REAL_TIME_SAFE_BROWSING_ENABLED:
 #if defined(OS_ANDROID)
@@ -631,16 +621,12 @@ bool ProfileImpl::GetBooleanSetting(Sett
   switch (type) {
     case SettingType::BASIC_SAFE_BROWSING_ENABLED:
 #if defined(OS_ANDROID)
-      return safe_browsing::IsSafeBrowsingEnabled(*pref_service);
+      return false;
 #endif
       return false;
     case SettingType::UKM_ENABLED:
       return pref_service->GetBoolean(prefs::kUkmEnabled);
     case SettingType::EXTENDED_REPORTING_SAFE_BROWSING_ENABLED:
-#if defined(OS_ANDROID)
-      return pref_service->GetBoolean(
-          ::prefs::kSafeBrowsingScoutReportingEnabled);
-#endif
       return false;
     case SettingType::REAL_TIME_SAFE_BROWSING_ENABLED:
 #if defined(OS_ANDROID)
--- a/weblayer/browser/browser_process.cc
+++ b/weblayer/browser/browser_process.cc
@@ -122,20 +122,9 @@ void BrowserProcess::CreateSubresourceFi
 
 #if defined(OS_ANDROID)
 SafeBrowsingService* BrowserProcess::GetSafeBrowsingService() {
-  if (!safe_browsing_service_) {
-    // Create and initialize safe_browsing_service on first get.
-    // Note: Initialize() needs to happen on UI thread.
-    safe_browsing_service_ =
-        std::make_unique<SafeBrowsingService>(GetUserAgent());
-    safe_browsing_service_->Initialize();
-  }
-  return safe_browsing_service_.get();
 }
 
 void BrowserProcess::StopSafeBrowsingService() {
-  if (safe_browsing_service_) {
-    safe_browsing_service_->StopDBManager();
-  }
 }
 #endif
 
--- a/weblayer/browser/browser_process.h
+++ b/weblayer/browser/browser_process.h
@@ -78,10 +78,6 @@ class BrowserProcess {
   std::unique_ptr<subresource_filter::RulesetService>
       subresource_filter_ruleset_service_;
 
-#if defined(OS_ANDROID)
-  std::unique_ptr<SafeBrowsingService> safe_browsing_service_;
-#endif
-
   SEQUENCE_CHECKER(sequence_checker_);
 
   DISALLOW_COPY_AND_ASSIGN(BrowserProcess);
--- a/chrome/browser/safe_browsing/android/BUILD.gn
+++ b/chrome/browser/safe_browsing/android/BUILD.gn
@@ -105,7 +105,6 @@ android_resources("java_resources") {
 
 java_cpp_enum("safe_browsing_enums") {
   sources = [
-    "//components/safe_browsing/core/common/safe_browsing_prefs.h",
     "//components/safe_browsing/core/common/safe_browsing_settings_metrics.h",
   ]
 }
--- a/chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingBridge.java
+++ b/chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingBridge.java
@@ -19,44 +19,42 @@ public final class SafeBrowsingBridge {
      * @return The UMA value for the file.
      */
     public static int umaValueForFile(String path) {
-        return SafeBrowsingBridgeJni.get().umaValueForFile(path);
+        return 0;
     }
 
     /**
      * @return Whether Safe Browsing Extended Reporting is currently enabled.
      */
     public static boolean isSafeBrowsingExtendedReportingEnabled() {
-        return SafeBrowsingBridgeJni.get().getSafeBrowsingExtendedReportingEnabled();
+        return false;
     }
 
     /**
      * @param enabled Whether Safe Browsing Extended Reporting should be enabled.
      */
     public static void setSafeBrowsingExtendedReportingEnabled(boolean enabled) {
-        SafeBrowsingBridgeJni.get().setSafeBrowsingExtendedReportingEnabled(enabled);
     }
 
     /**
      * @return Whether Safe Browsing Extended Reporting is managed
      */
     public static boolean isSafeBrowsingExtendedReportingManaged() {
-        return SafeBrowsingBridgeJni.get().getSafeBrowsingExtendedReportingManaged();
+        return false;
     }
 
     /**
      * @return The Safe Browsing state. It can be Enhanced Protection, Standard Protection, or No
      *         Protection.
      */
-    public static @SafeBrowsingState int getSafeBrowsingState() {
-        return SafeBrowsingBridgeJni.get().getSafeBrowsingState();
+    public static int getSafeBrowsingState() {
+        return 0;
     }
 
     /**
      * @param state Set the Safe Browsing state. It can be Enhanced Protection, Standard Protection,
      *         or No Protection.
      */
-    public static void setSafeBrowsingState(@SafeBrowsingState int state) {
-        SafeBrowsingBridgeJni.get().setSafeBrowsingState(state);
+    public static void setSafeBrowsingState(int state) {
     }
 
     /**
@@ -64,26 +62,13 @@ public final class SafeBrowsingBridge {
      * the SafeBrowsingEnabled policy(legacy) or the SafeBrowsingProtectionLevel policy(new).
      */
     public static boolean isSafeBrowsingManaged() {
-        return SafeBrowsingBridgeJni.get().isSafeBrowsingManaged();
+        return false;
     }
 
     /**
      * @return Whether there is a Google account to use for the leak detection check.
      */
     public static boolean hasAccountForLeakCheckRequest() {
-        return SafeBrowsingBridgeJni.get().hasAccountForLeakCheckRequest();
-    }
-
-    @NativeMethods
-    interface Natives {
-        int umaValueForFile(String path);
-        boolean getSafeBrowsingExtendedReportingEnabled();
-        void setSafeBrowsingExtendedReportingEnabled(boolean enabled);
-        boolean getSafeBrowsingExtendedReportingManaged();
-        @SafeBrowsingState
-        int getSafeBrowsingState();
-        void setSafeBrowsingState(@SafeBrowsingState int state);
-        boolean hasAccountForLeakCheckRequest();
-        boolean isSafeBrowsingManaged();
+        return false;
     }
 }
--- a/chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/settings/RadioButtonGroupSafeBrowsingPreference.java
+++ b/chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/settings/RadioButtonGroupSafeBrowsingPreference.java
@@ -15,7 +15,6 @@ import androidx.core.content.ContextComp
 import androidx.preference.Preference;
 import androidx.preference.PreferenceViewHolder;
 
-import org.chromium.chrome.browser.safe_browsing.SafeBrowsingState;
 import org.chromium.chrome.browser.safe_browsing.metrics.SettingsAccessPoint;
 import org.chromium.components.browser_ui.settings.ManagedPreferenceDelegate;
 import org.chromium.components.browser_ui.settings.ManagedPreferencesUtils;
@@ -47,13 +46,13 @@ public class RadioButtonGroupSafeBrowsin
          * Notify that details of a Safe Browsing mode are requested.
          * @param safeBrowsingState The Safe Browsing mode that is requested for more details.
          */
-        void onSafeBrowsingModeDetailsRequested(@SafeBrowsingState int safeBrowsingState);
+        void onSafeBrowsingModeDetailsRequested(int safeBrowsingState);
     }
 
     private @Nullable RadioButtonWithDescriptionAndAuxButton mEnhancedProtection;
     private RadioButtonWithDescriptionAndAuxButton mStandardProtection;
     private RadioButtonWithDescription mNoProtection;
-    private @SafeBrowsingState int mSafeBrowsingState;
+    private int mSafeBrowsingState;
     private boolean mIsEnhancedProtectionEnabled;
     private @SettingsAccessPoint int mAccessPoint;
     private OnSafeBrowsingModeDetailsRequested mSafeBrowsingModeDetailsRequestedListener;
@@ -70,27 +69,16 @@ public class RadioButtonGroupSafeBrowsin
      * @param isEnhancedProtectionEnabled Whether to show the Enhanced Protection button.
      * @param accessPoint Where this preference was triggered to be created.
      */
-    public void init(@SafeBrowsingState int safeBrowsingState, boolean isEnhancedProtectionEnabled,
+    public void init(int safeBrowsingState, boolean isEnhancedProtectionEnabled,
             @SettingsAccessPoint int accessPoint) {
         mSafeBrowsingState = safeBrowsingState;
         mIsEnhancedProtectionEnabled = isEnhancedProtectionEnabled;
         mAccessPoint = accessPoint;
-        assert ((mSafeBrowsingState != SafeBrowsingState.ENHANCED_PROTECTION)
-                || mIsEnhancedProtectionEnabled)
-            : "Safe Browsing state shouldn't be enhanced protection when the flag is disabled.";
     }
 
     @Override
     public void onCheckedChanged(RadioGroup group, int checkedId) {
-        if (mIsEnhancedProtectionEnabled && checkedId == mEnhancedProtection.getId()) {
-            mSafeBrowsingState = SafeBrowsingState.ENHANCED_PROTECTION;
-        } else if (checkedId == mStandardProtection.getId()) {
-            mSafeBrowsingState = SafeBrowsingState.STANDARD_PROTECTION;
-        } else if (checkedId == mNoProtection.getId()) {
-            mSafeBrowsingState = SafeBrowsingState.NO_SAFE_BROWSING;
-        } else {
-            assert false : "Should not be reached.";
-        }
+        mSafeBrowsingState = 0;
         callChangeListener(mSafeBrowsingState);
     }
 
@@ -133,11 +121,7 @@ public class RadioButtonGroupSafeBrowsin
         assert mSafeBrowsingModeDetailsRequestedListener
                 != null : "The listener should be set if the aux button is clickable.";
         if (mIsEnhancedProtectionEnabled && clickedButtonId == mEnhancedProtection.getId()) {
-            mSafeBrowsingModeDetailsRequestedListener.onSafeBrowsingModeDetailsRequested(
-                    SafeBrowsingState.ENHANCED_PROTECTION);
         } else if (clickedButtonId == mStandardProtection.getId()) {
-            mSafeBrowsingModeDetailsRequestedListener.onSafeBrowsingModeDetailsRequested(
-                    SafeBrowsingState.STANDARD_PROTECTION);
         } else {
             assert false : "Should not be reached.";
         }
@@ -166,20 +150,17 @@ public class RadioButtonGroupSafeBrowsin
      * @param checkedState Set the radio button of checkedState to checked, and set the radio
      *         buttons of other states to unchecked.
      */
-    public void setCheckedState(@SafeBrowsingState int checkedState) {
+    public void setCheckedState(int checkedState) {
         mSafeBrowsingState = checkedState;
-        assert ((checkedState != SafeBrowsingState.ENHANCED_PROTECTION)
-                || mIsEnhancedProtectionEnabled)
-            : "Checked state shouldn't be enhanced protection when the flag is disabled.";
         if (mIsEnhancedProtectionEnabled) {
-            mEnhancedProtection.setChecked(checkedState == SafeBrowsingState.ENHANCED_PROTECTION);
+            mEnhancedProtection.setChecked(false);
         }
-        mStandardProtection.setChecked(checkedState == SafeBrowsingState.STANDARD_PROTECTION);
-        mNoProtection.setChecked(checkedState == SafeBrowsingState.NO_SAFE_BROWSING);
+        mStandardProtection.setChecked(false);
+        mNoProtection.setChecked(true);
     }
 
     @VisibleForTesting
-    public @SafeBrowsingState int getSafeBrowsingStateForTesting() {
+    public int getSafeBrowsingStateForTesting() {
         return mSafeBrowsingState;
     }
 
--- a/chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/settings/SecuritySettingsFragment.java
+++ b/chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/settings/SecuritySettingsFragment.java
@@ -15,7 +15,6 @@ import org.chromium.base.metrics.RecordH
 import org.chromium.base.metrics.RecordUserAction;
 import org.chromium.chrome.browser.flags.ChromeFeatureList;
 import org.chromium.chrome.browser.safe_browsing.SafeBrowsingBridge;
-import org.chromium.chrome.browser.safe_browsing.SafeBrowsingState;
 import org.chromium.chrome.browser.safe_browsing.metrics.SettingsAccessPoint;
 import org.chromium.chrome.browser.safe_browsing.metrics.UserAction;
 import org.chromium.chrome.browser.settings.ChromeManagedPreferenceDelegate;
@@ -46,21 +45,9 @@ public class SecuritySettingsFragment ex
      * @return A summary that describes the current Safe Browsing state.
      */
     public static String getSafeBrowsingSummaryString(Context context) {
-        @SafeBrowsingState
         int safeBrowsingState = SafeBrowsingBridge.getSafeBrowsingState();
         String safeBrowsingStateString = "";
-        if (safeBrowsingState == SafeBrowsingState.ENHANCED_PROTECTION) {
-            safeBrowsingStateString =
-                    context.getString(R.string.safe_browsing_enhanced_protection_title);
-        } else if (safeBrowsingState == SafeBrowsingState.STANDARD_PROTECTION) {
-            safeBrowsingStateString =
-                    context.getString(R.string.safe_browsing_standard_protection_title);
-        } else if (safeBrowsingState == SafeBrowsingState.NO_SAFE_BROWSING) {
-            return context.getString(R.string.prefs_safe_browsing_no_protection_summary);
-        } else {
-            assert false : "Should not be reached";
-        }
-        return context.getString(R.string.prefs_safe_browsing_summary, safeBrowsingStateString);
+        return context.getString(R.string.prefs_safe_browsing_no_protection_summary);
     }
 
     /**
@@ -103,17 +90,8 @@ public class SecuritySettingsFragment ex
     }
 
     @Override
-    public void onSafeBrowsingModeDetailsRequested(@SafeBrowsingState int safeBrowsingState) {
+    public void onSafeBrowsingModeDetailsRequested(int safeBrowsingState) {
         recordUserActionHistogramForStateDetailsClicked(safeBrowsingState);
-        if (safeBrowsingState == SafeBrowsingState.ENHANCED_PROTECTION) {
-            mSettingsLauncher.launchSettingsActivity(
-                    getActivity(), EnhancedProtectionSettingsFragment.class);
-        } else if (safeBrowsingState == SafeBrowsingState.STANDARD_PROTECTION) {
-            mSettingsLauncher.launchSettingsActivity(
-                    getActivity(), StandardProtectionSettingsFragment.class);
-        } else {
-            assert false : "Should not be reached";
-        }
     }
 
     @Override
@@ -137,9 +115,7 @@ public class SecuritySettingsFragment ex
     public boolean onPreferenceChange(Preference preference, Object newValue) {
         String key = preference.getKey();
         assert PREF_SAFE_BROWSING.equals(key) : "Unexpected preference key.";
-        @SafeBrowsingState
         int newState = (int) newValue;
-        @SafeBrowsingState
         int currentState = SafeBrowsingBridge.getSafeBrowsingState();
         if (newState == currentState) {
             return true;
@@ -147,7 +123,7 @@ public class SecuritySettingsFragment ex
         recordUserActionHistogramForNewStateClicked(newState);
         // If the user selects no protection from another Safe Browsing state, show a confirmation
         // dialog to double check if they want to select no protection.
-        if (newState == SafeBrowsingState.NO_SAFE_BROWSING) {
+        if (true) {
             // The user hasn't confirmed to select no protection, keep the radio button / UI checked
             // state at the currently selected level.
             mSafeBrowsingPreference.setCheckedState(currentState);
@@ -155,15 +131,6 @@ public class SecuritySettingsFragment ex
                     .create(getContext(),
                             (didConfirm) -> {
                                 recordUserActionHistogramForNoProtectionConfirmation(didConfirm);
-                                if (didConfirm) {
-                                    // The user has confirmed to select no protection, set Safe
-                                    // Browsing pref to no protection, and change the radio button /
-                                    // UI checked state to no protection.
-                                    SafeBrowsingBridge.setSafeBrowsingState(
-                                            SafeBrowsingState.NO_SAFE_BROWSING);
-                                    mSafeBrowsingPreference.setCheckedState(
-                                            SafeBrowsingState.NO_SAFE_BROWSING);
-                                }
                                 // No-ops if the user denies.
                             })
                     .show();
@@ -174,34 +141,11 @@ public class SecuritySettingsFragment ex
     }
 
     private void recordUserActionHistogramForNewStateClicked(
-            @SafeBrowsingState int safeBrowsingState) {
-        switch (safeBrowsingState) {
-            case (SafeBrowsingState.ENHANCED_PROTECTION):
-                recordUserActionHistogram(UserAction.ENHANCED_PROTECTION_CLICKED);
-                break;
-            case (SafeBrowsingState.STANDARD_PROTECTION):
-                recordUserActionHistogram(UserAction.STANDARD_PROTECTION_CLICKED);
-                break;
-            case (SafeBrowsingState.NO_SAFE_BROWSING):
-                recordUserActionHistogram(UserAction.DISABLE_SAFE_BROWSING_CLICKED);
-                break;
-            default:
-                assert false : "Should not be reached.";
-        }
+            int safeBrowsingState) {
     }
 
     private void recordUserActionHistogramForStateDetailsClicked(
-            @SafeBrowsingState int safeBrowsingState) {
-        switch (safeBrowsingState) {
-            case (SafeBrowsingState.ENHANCED_PROTECTION):
-                recordUserActionHistogram(UserAction.ENHANCED_PROTECTION_EXPAND_ARROW_CLICKED);
-                break;
-            case (SafeBrowsingState.STANDARD_PROTECTION):
-                recordUserActionHistogram(UserAction.STANDARD_PROTECTION_EXPAND_ARROW_CLICKED);
-                break;
-            default:
-                assert false : "Should not be reached.";
-        }
+            int safeBrowsingState) {
     }
 
     private void recordUserActionHistogramForNoProtectionConfirmation(boolean didConfirm) {
--- a/chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/settings/StandardProtectionSettingsFragment.java
+++ b/chrome/browser/safe_browsing/android/java/src/org/chromium/chrome/browser/safe_browsing/settings/StandardProtectionSettingsFragment.java
@@ -12,7 +12,6 @@ import androidx.preference.Preference;
 import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.safe_browsing.SafeBrowsingBridge;
-import org.chromium.chrome.browser.safe_browsing.SafeBrowsingState;
 import org.chromium.chrome.browser.settings.ChromeManagedPreferenceDelegate;
 import org.chromium.components.browser_ui.settings.ChromeSwitchPreference;
 import org.chromium.components.browser_ui.settings.ManagedPreferenceDelegate;
@@ -62,12 +61,9 @@ public class StandardProtectionSettingsF
      * forced enabled in ENHANCED_PROTECTION mode and forced disabled in NO_SAFE_BROWSING mode.
      */
     private void updateLeakDetectionAndExtendedReportingPreferences() {
-        @SafeBrowsingState
         int safe_browsing_state = SafeBrowsingBridge.getSafeBrowsingState();
-        boolean is_enhanced_protection =
-                safe_browsing_state == SafeBrowsingState.ENHANCED_PROTECTION;
-        boolean is_standard_protection =
-                safe_browsing_state == SafeBrowsingState.STANDARD_PROTECTION;
+        boolean is_enhanced_protection = false;
+        boolean is_standard_protection = false;
 
         boolean extended_reporting_checked = is_enhanced_protection
                 || (is_standard_protection
--- a/chrome/android/java/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoUtils.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoUtils.java
@@ -64,9 +64,7 @@ final class EnhancedProtectionPromoUtils
                 "MaxEnhancedProtectionPromoImpressions", DEFAULT_MAX_IMPRESSION_SEEN);
         // TODO(bdea): If the user has pressed "Continue" and not selected Enhanced Protection,
         // should we still show the promo.
-        return (profile != null) && !UserPrefs.get(profile).getBoolean(Pref.SAFE_BROWSING_ENHANCED)
-                && !isPromoDismissedInSharedPreference() && (timesSeen <= maxImpressions)
-                && !SafeBrowsingBridge.isSafeBrowsingManaged();
+        return false;
     }
 
     static boolean isPromoDismissedInSharedPreference() {
--- a/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/SignInPreference.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/SignInPreference.java
@@ -175,11 +175,7 @@ public class SignInPreference
                         .getSigninManager(Profile.getLastUsedRegularProfile())
                         .isSigninDisabledByPolicy()) {
             // TODO(https://crbug.com/1133739): Clean up after revising isSigninDisabledByPolicy.
-            if (mPrefService.isManagedPreference(Pref.SIGNIN_ALLOWED)) {
-                setupSigninDisabledByPolicy();
-            } else {
-                setupSigninDisallowed();
-            }
+            setupSigninDisallowed();
             return;
         }
 
--- a/chrome/android/java/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoController.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/ntp/cards/promo/enhanced_protection/EnhancedProtectionPromoController.java
@@ -16,8 +16,6 @@ import androidx.appcompat.content.res.Ap
 import org.chromium.chrome.R;
 import org.chromium.chrome.browser.ntp.cards.promo.enhanced_protection.EnhancedProtectionPromoUtils.EnhancedProtectionPromoAction;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.safe_browsing.metrics.SettingsAccessPoint;
-import org.chromium.chrome.browser.safe_browsing.settings.SecuritySettingsFragment;
 import org.chromium.chrome.browser.settings.SettingsLauncher;
 import org.chromium.chrome.browser.settings.SettingsLauncherImpl;
 import org.chromium.components.browser_ui.widget.promo.PromoCardCoordinator;
@@ -173,10 +171,6 @@ public class EnhancedProtectionPromoCont
     private void onPrimaryButtonClicked() {
         EnhancedProtectionPromoUtils.recordEnhancedProtectionPromoEvent(
                 EnhancedProtectionPromoAction.ACCEPTED);
-        SettingsLauncher launcher = new SettingsLauncherImpl();
-        launcher.launchSettingsActivity(mContext, SecuritySettingsFragment.class,
-                SecuritySettingsFragment.createArguments(
-                        SettingsAccessPoint.SURFACE_EXPLORER_PROMO_SLINGER));
     }
 
     private void onPromoSeen() {
--- a/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
@@ -21,8 +21,6 @@ import org.chromium.chrome.browser.flags
 import org.chromium.chrome.browser.preferences.Pref;
 import org.chromium.chrome.browser.privacy.secure_dns.SecureDnsSettings;
 import org.chromium.chrome.browser.profiles.Profile;
-import org.chromium.chrome.browser.safe_browsing.metrics.SettingsAccessPoint;
-import org.chromium.chrome.browser.safe_browsing.settings.SecuritySettingsFragment;
 import org.chromium.chrome.browser.settings.ChromeManagedPreferenceDelegate;
 import org.chromium.chrome.browser.settings.SettingsLauncher;
 import org.chromium.chrome.browser.settings.SettingsLauncherImpl;
@@ -82,11 +80,7 @@ public class PrivacySettings
         if (ChromeFeatureList.isEnabled(ChromeFeatureList.SAFE_BROWSING_SECURITY_SECTION_UI)) {
             getActivity().setTitle(R.string.prefs_privacy_security);
             Preference safeBrowsingPreference = findPreference(PREF_SAFE_BROWSING);
-            safeBrowsingPreference.setSummary(
-                    SecuritySettingsFragment.getSafeBrowsingSummaryString(getContext()));
             safeBrowsingPreference.setOnPreferenceClickListener((preference) -> {
-                preference.getExtras().putInt(
-                        SecuritySettingsFragment.ACCESS_POINT, SettingsAccessPoint.PARENT_SETTINGS);
                 return false;
             });
         } else {
@@ -197,8 +191,6 @@ public class PrivacySettings
 
         Preference safeBrowsingPreference = findPreference(PREF_SAFE_BROWSING);
         if (safeBrowsingPreference != null && safeBrowsingPreference.isVisible()) {
-            safeBrowsingPreference.setSummary(
-                    SecuritySettingsFragment.getSafeBrowsingSummaryString(getContext()));
         }
 
         Preference usageStatsPref = findPreference(PREF_USAGE_STATS);
--- a/chrome/android/java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingSettingsLauncher.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/safe_browsing/SafeBrowsingSettingsLauncher.java
@@ -6,8 +6,6 @@ package org.chromium.chrome.browser.safe
 import android.content.Context;
 
 import org.chromium.base.annotations.CalledByNative;
-import org.chromium.chrome.browser.safe_browsing.metrics.SettingsAccessPoint;
-import org.chromium.chrome.browser.safe_browsing.settings.SecuritySettingsFragment;
 import org.chromium.chrome.browser.settings.SettingsLauncher;
 import org.chromium.chrome.browser.settings.SettingsLauncherImpl;
 import org.chromium.content_public.browser.WebContents;
@@ -25,8 +23,5 @@ public class SafeBrowsingSettingsLaunche
         if (window == null) return;
         Context currentContext = window.getContext().get();
         SettingsLauncher settingsLauncher = new SettingsLauncherImpl();
-        settingsLauncher.launchSettingsActivity(currentContext, SecuritySettingsFragment.class,
-                SecuritySettingsFragment.createArguments(
-                        SettingsAccessPoint.SECURITY_INTERSTITIAL));
     }
 }
