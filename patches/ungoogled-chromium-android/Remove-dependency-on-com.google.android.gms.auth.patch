From: Wengling Chen <feiyu2817@gmail.com>
Date: Sat, 2 Nov 2019 09:22:31 +0100
Subject: Remove dependency on com.google.android.gms.auth

---
 chrome/android/BUILD.gn                                                                                          |    1 
 components/background_task_scheduler/BUILD.gn                                                                    |    1 
 components/signin/core/browser/android/BUILD.gn                                                                  |    1 
 components/signin/core/browser/android/java/src/org/chromium/components/signin/SystemAccountManagerDelegate.java |   32 ----
 content/public/android/BUILD.gn                                                                                  |    1 
 content/public/android/java/src/org/chromium/content/browser/sms/SmsProviderGms.java                             |    6 
 content/public/android/java/src/org/chromium/content/browser/sms/SmsUserConsentReceiver.java                     |   60 -------
 content/public/android/java/src/org/chromium/content/browser/sms/SmsVerificationReceiver.java                    |   80 ----------
 content/public/android/java/src/org/chromium/content/browser/sms/Wrappers.java                                   |   26 ---
 content/test/BUILD.gn                                                                                            |    1 
 remoting/android/java/src/org/chromium/chromoting/OAuthTokenConsumer.java                                        |    9 -
 remoting/android/java/src/org/chromium/chromoting/base/OAuthTokenFetcher.java                                    |   35 ----
 third_party/android_deps/BUILD.gn                                                                                |   47 -----
 13 files changed, 9 insertions(+), 291 deletions(-)

--- a/chrome/android/BUILD.gn
+++ b/chrome/android/BUILD.gn
@@ -278,7 +278,6 @@ android_library("chrome_java") {
     ":partner_location_descriptor_proto_java",
     ":update_proto_java",
     ":usage_stats_proto_java",
-    "$google_play_services_package:google_play_services_auth_base_java",
     "$google_play_services_package:google_play_services_base_java",
     "$google_play_services_package:google_play_services_basement_java",
     "$google_play_services_package:google_play_services_cast_framework_java",
--- a/components/signin/core/browser/android/BUILD.gn
+++ b/components/signin/core/browser/android/BUILD.gn
@@ -14,7 +14,6 @@ generate_jni("jni_headers") {
 
 android_library("java") {
   deps = [
-    "$google_play_services_package:google_play_services_auth_base_java",
     "$google_play_services_package:google_play_services_base_java",
     "$google_play_services_package:google_play_services_basement_java",
     "//base:base_java",
--- a/components/signin/core/browser/android/java/src/org/chromium/components/signin/SystemAccountManagerDelegate.java
+++ b/components/signin/core/browser/android/java/src/org/chromium/components/signin/SystemAccountManagerDelegate.java
@@ -26,7 +26,6 @@ import android.os.SystemClock;
 
 import androidx.annotation.Nullable;
 
-
 import org.chromium.base.ApiCompatibilityUtils;
 import org.chromium.base.Callback;
 import org.chromium.base.ContextUtils;
@@ -84,16 +83,10 @@ public class SystemAccountManagerDelegat
     }
 
     protected void checkCanUseGooglePlayServices() throws AccountManagerDelegateException {
-        Context context = ContextUtils.getApplicationContext();
-        final int resultCode =
-                ChromiumPlayServicesAvailability.getGooglePlayServicesConnectionResult(context);
-        if (resultCode == ConnectionResult.SUCCESS) {
-            return;
-        }
+        final int resultCode = 1;
 
         throw new GmsAvailabilityException(
-                String.format("Can't use Google Play Services: %s",
-                        GoogleApiAvailability.getInstance().getErrorString(resultCode)),
+                "Can't use Google Play Services",
                 resultCode);
     }
 
@@ -129,15 +122,6 @@ public class SystemAccountManagerDelegat
 
     @Override
     public void invalidateAuthToken(String authToken) throws AuthException {
-        try {
-            GoogleAuthUtil.clearToken(ContextUtils.getApplicationContext(), authToken);
-        } catch (GooglePlayServicesAvailabilityException ex) {
-            throw new AuthException(AuthException.NONTRANSIENT, ex);
-        } catch (GoogleAuthException ex) {
-            throw new AuthException(AuthException.NONTRANSIENT, ex);
-        } catch (IOException ex) {
-            throw new AuthException(AuthException.TRANSIENT, ex);
-        }
     }
 
     @Override
@@ -216,21 +200,13 @@ public class SystemAccountManagerDelegat
     @Nullable
     @Override
     public String getAccountGaiaId(String accountEmail) {
-        try {
-            return GoogleAuthUtil.getAccountId(ContextUtils.getApplicationContext(), accountEmail);
-        } catch (IOException | GoogleAuthException ex) {
-            Log.e(TAG, "SystemAccountManagerDelegate.getAccountGaiaId", ex);
-            return null;
-        }
+        return null;
     }
 
     @Override
     public boolean isGooglePlayServicesAvailable() {
         // TODO(http://crbug.com/577190): Remove StrictMode override.
-        try (StrictModeContext ignored = StrictModeContext.allowDiskWrites()) {
-            return ChromiumPlayServicesAvailability.isGooglePlayServicesAvailable(
-                    ContextUtils.getApplicationContext());
-        }
+        return false;
     }
 
     protected boolean hasGetAccountsPermission() {
--- a/content/public/android/BUILD.gn
+++ b/content/public/android/BUILD.gn
@@ -75,7 +75,6 @@ action_with_pydeps("generate_sandboxed_s
 android_library("content_java") {
   deps = [
     ":content_java_resources",
-    "$google_play_services_package:google_play_services_auth_api_phone_java",
     "$google_play_services_package:google_play_services_base_java",
     "$google_play_services_package:google_play_services_basement_java",
     "$google_play_services_package:google_play_services_tasks_java",
--- a/third_party/android_deps/BUILD.gn
+++ b/third_party/android_deps/BUILD.gn
@@ -1137,53 +1137,6 @@ java_prebuilt("com_android_tools_build_j
 }
 
 # This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
-android_aar_prebuilt("google_play_services_auth_java") {
-  aar_path = "libs/com_google_android_gms_play_services_auth/play-services-auth-17.0.0.aar"
-  info_path = "libs/com_google_android_gms_play_services_auth/com_google_android_gms_play_services_auth.info"
-  deps = [
-    ":androidx_fragment_fragment_java",
-    ":androidx_loader_loader_java",
-    ":google_play_services_auth_api_phone_java",
-    ":google_play_services_auth_base_java",
-    ":google_play_services_base_java",
-    ":google_play_services_basement_java",
-    ":google_play_services_tasks_java",
-  ]
-
-  # Removing drawables from GMS .aars as they are unused bloat.
-  strip_drawables = true
-}
-
-# This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
-android_aar_prebuilt("google_play_services_auth_api_phone_java") {
-  aar_path = "libs/com_google_android_gms_play_services_auth_api_phone/play-services-auth-api-phone-17.5.0.aar"
-  info_path = "libs/com_google_android_gms_play_services_auth_api_phone/com_google_android_gms_play_services_auth_api_phone.info"
-  deps = [
-    ":google_play_services_base_java",
-    ":google_play_services_basement_java",
-    ":google_play_services_tasks_java",
-  ]
-
-  # Removing drawables from GMS .aars as they are unused bloat.
-  strip_drawables = true
-}
-
-# This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
-android_aar_prebuilt("google_play_services_auth_base_java") {
-  aar_path = "libs/com_google_android_gms_play_services_auth_base/play-services-auth-base-17.0.0.aar"
-  info_path = "libs/com_google_android_gms_play_services_auth_base/com_google_android_gms_play_services_auth_base.info"
-  deps = [
-    ":androidx_collection_collection_java",
-    ":google_play_services_base_java",
-    ":google_play_services_basement_java",
-    ":google_play_services_tasks_java",
-  ]
-
-  # Removing drawables from GMS .aars as they are unused bloat.
-  strip_drawables = true
-}
-
-# This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
 android_aar_prebuilt("google_play_services_base_java") {
   aar_path = "libs/com_google_android_gms_play_services_base/play-services-base-17.1.0.aar"
   info_path = "libs/com_google_android_gms_play_services_base/com_google_android_gms_play_services_base.info"
--- a/content/public/android/java/src/org/chromium/content/browser/sms/Wrappers.java
+++ b/content/public/android/java/src/org/chromium/content/browser/sms/Wrappers.java
@@ -10,11 +10,6 @@ import android.content.ContextWrapper;
 import android.content.Intent;
 import android.content.IntentFilter;
 
-import com.google.android.gms.auth.api.phone.SmsCodeBrowserClient;
-import com.google.android.gms.auth.api.phone.SmsCodeRetriever;
-import com.google.android.gms.auth.api.phone.SmsRetrieverClient;
-import com.google.android.gms.tasks.Task;
-
 class Wrappers {
     // Prevent instantiation.
     private Wrappers() {}
@@ -24,15 +19,10 @@ class Wrappers {
      */
     static class SmsRetrieverClientWrapper {
         // Used for user consent flow.
-        private final SmsRetrieverClient mSmsRetrieverClient;
         // Used for browser code flow.
-        private final SmsCodeBrowserClient mSmsCodeBrowserClient;
         private WebOTPServiceContext mContext;
 
-        public SmsRetrieverClientWrapper(
-                SmsRetrieverClient smsRetrieverClient, SmsCodeBrowserClient smsCodeBrowserClient) {
-            mSmsRetrieverClient = smsRetrieverClient;
-            mSmsCodeBrowserClient = smsCodeBrowserClient;
+        public SmsRetrieverClientWrapper() {
         }
 
         public void setContext(WebOTPServiceContext context) {
@@ -42,14 +32,6 @@ class Wrappers {
         public WebOTPServiceContext getContext() {
             return mContext;
         }
-
-        public Task<Void> startSmsCodeBrowserRetriever() {
-            return mSmsCodeBrowserClient.startSmsCodeRetriever();
-        }
-
-        public Task<Void> startSmsUserConsent(String senderAddress) {
-            return mSmsRetrieverClient.startSmsUserConsent(senderAddress);
-        }
     }
 
     /**
@@ -77,11 +59,7 @@ class Wrappers {
 
         @Override
         public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter) {
-            if (filter.hasAction(SmsCodeRetriever.SMS_CODE_RETRIEVED_ACTION)) {
-                mVerificationReceiver = receiver;
-            } else {
-                mUserConsentReceiver = receiver;
-            }
+            mUserConsentReceiver = receiver;
 
             return super.registerReceiver(receiver, filter);
         }
--- a/components/background_task_scheduler/BUILD.gn
+++ b/components/background_task_scheduler/BUILD.gn
@@ -121,7 +121,6 @@ if (is_android) {
 
     deps = [
       ":background_task_scheduler_task_ids_java",
-      "$google_play_services_package:google_play_services_auth_base_java",
       "$google_play_services_package:google_play_services_base_java",
       "$google_play_services_package:google_play_services_basement_java",
       "$google_play_services_package:google_play_services_tasks_java",
--- a/content/public/android/java/src/org/chromium/content/browser/sms/SmsUserConsentReceiver.java
+++ b/content/public/android/java/src/org/chromium/content/browser/sms/SmsUserConsentReceiver.java
@@ -10,13 +10,6 @@ import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
 
-import com.google.android.gms.auth.api.phone.SmsRetriever;
-import com.google.android.gms.auth.api.phone.SmsRetrieverClient;
-import com.google.android.gms.common.api.CommonStatusCodes;
-import com.google.android.gms.common.api.Status;
-import com.google.android.gms.tasks.OnFailureListener;
-import com.google.android.gms.tasks.Task;
-
 import org.chromium.base.Log;
 import org.chromium.ui.base.WindowAndroid;
 
@@ -44,14 +37,9 @@ public class SmsUserConsentReceiver exte
         // this registration expire after the SMS message is received.
         if (DEBUG) Log.d(TAG, "Registering intent filters.");
         IntentFilter filter = new IntentFilter();
-        filter.addAction(SmsRetriever.SMS_RETRIEVED_ACTION);
         mContext.registerReceiver(this, filter);
     }
 
-    public SmsRetrieverClient createClient() {
-        return SmsRetriever.getClient(mContext);
-    }
-
     public void destroy() {
         if (DEBUG) Log.d(TAG, "Destroying SmsUserConsentReceiver.");
         mDestroyed = true;
@@ -66,62 +54,16 @@ public class SmsUserConsentReceiver exte
             return;
         }
 
-        if (!SmsRetriever.SMS_RETRIEVED_ACTION.equals(intent.getAction())) {
-            return;
-        }
-
         if (intent.getExtras() == null) {
             return;
         }
-
-        final Status status;
-
-        try {
-            status = (Status) intent.getParcelableExtra(SmsRetriever.EXTRA_STATUS);
-        } catch (Throwable e) {
-            if (DEBUG) Log.d(TAG, "Error getting parceable.");
-            return;
-        }
-
-        switch (status.getStatusCode()) {
-            case CommonStatusCodes.SUCCESS:
-                assert mProvider.getWindow() != null;
-
-                Intent consentIntent =
-                        intent.getExtras().getParcelable(SmsRetriever.EXTRA_CONSENT_INTENT);
-                try {
-                    mProvider.getWindow().showIntent(consentIntent,
-                            (window, resultCode, data) -> onConsentResult(resultCode, data), null);
-                } catch (android.content.ActivityNotFoundException e) {
-                    if (DEBUG) Log.d(TAG, "Error starting activity for result.");
-                }
-                break;
-            case CommonStatusCodes.TIMEOUT:
-                if (DEBUG) Log.d(TAG, "Timeout");
-                mProvider.onTimeout();
-                break;
-        }
     }
 
     void onConsentResult(int resultCode, Intent data) {
-        if (resultCode == Activity.RESULT_OK) {
-            String message = data.getStringExtra(SmsRetriever.EXTRA_SMS_MESSAGE);
-            mProvider.onReceive(message);
-        } else if (resultCode == Activity.RESULT_CANCELED) {
-            if (DEBUG) Log.d(TAG, "Activity result cancelled.");
-            mProvider.onCancel();
-        }
+        if (DEBUG) Log.d(TAG, "Activity result cancelled.");
     }
 
     public void listen(WindowAndroid windowAndroid) {
-        Task<Void> task = mProvider.getClient().startSmsUserConsent(null);
-
-        task.addOnFailureListener(new OnFailureListener() {
-            @Override
-            public void onFailure(Exception e) {
-                Log.e(TAG, "Task failed to start", e);
-            }
-        });
         if (DEBUG) Log.d(TAG, "Installed task");
     }
 }
--- a/content/public/android/java/src/org/chromium/content/browser/sms/SmsVerificationReceiver.java
+++ b/content/public/android/java/src/org/chromium/content/browser/sms/SmsVerificationReceiver.java
@@ -11,16 +11,6 @@ import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
 
-import com.google.android.gms.auth.api.phone.SmsCodeBrowserClient;
-import com.google.android.gms.auth.api.phone.SmsCodeRetriever;
-import com.google.android.gms.auth.api.phone.SmsRetriever;
-import com.google.android.gms.auth.api.phone.SmsRetrieverStatusCodes;
-import com.google.android.gms.common.api.ApiException;
-import com.google.android.gms.common.api.CommonStatusCodes;
-import com.google.android.gms.common.api.ResolvableApiException;
-import com.google.android.gms.common.api.Status;
-import com.google.android.gms.tasks.Task;
-
 import org.chromium.base.Log;
 import org.chromium.ui.base.WindowAndroid;
 
@@ -55,15 +45,10 @@ public class SmsVerificationReceiver ext
         // message is received.
         if (DEBUG) Log.i(TAG, "Registering intent filters.");
         IntentFilter filter = new IntentFilter();
-        filter.addAction(SmsCodeRetriever.SMS_CODE_RETRIEVED_ACTION);
 
         mContext.registerReceiver(this, filter);
     }
 
-    public SmsCodeBrowserClient createClient() {
-        return SmsCodeRetriever.getBrowserClient(mContext);
-    }
-
     public void destroy() {
         if (DEBUG) Log.d(TAG, "Destroying SmsVerificationReceiver.");
         mDestroyed = true;
@@ -78,34 +63,9 @@ public class SmsVerificationReceiver ext
             return;
         }
 
-        if (!SmsCodeRetriever.SMS_CODE_RETRIEVED_ACTION.equals(intent.getAction())) {
-            return;
-        }
-
         if (intent.getExtras() == null) {
             return;
         }
-
-        final Status status;
-
-        try {
-            status = (Status) intent.getParcelableExtra(SmsRetriever.EXTRA_STATUS);
-        } catch (Throwable e) {
-            if (DEBUG) Log.d(TAG, "Error getting parceable");
-            return;
-        }
-
-        switch (status.getStatusCode()) {
-            case CommonStatusCodes.SUCCESS:
-                String message = intent.getExtras().getString(SmsCodeRetriever.EXTRA_SMS_CODE_LINE);
-                if (DEBUG) Log.d(TAG, "Got message: %s!", message);
-                mProvider.onReceive(message);
-                break;
-            case CommonStatusCodes.TIMEOUT:
-                if (DEBUG) Log.d(TAG, "Timeout");
-                mProvider.onTimeout();
-                break;
-        }
     }
 
     public void onPermissionDone(WindowAndroid window, int resultCode) {
@@ -126,50 +86,10 @@ public class SmsVerificationReceiver ext
      */
     public void onRetrieverTaskFailure(WindowAndroid window, Exception e) {
         if (DEBUG) Log.d(TAG, "Task failed. Attempting recovery.", e);
-        ApiException exception = (ApiException) e;
-        if (exception.getStatusCode() == SmsRetrieverStatusCodes.API_NOT_CONNECTED) {
-            mProvider.onMethodNotAvailable();
-            Log.d(TAG, "update GMS services.");
-        } else if (exception.getStatusCode() == SmsRetrieverStatusCodes.PLATFORM_NOT_SUPPORTED) {
-            mProvider.onMethodNotAvailable();
-            Log.d(TAG, "old android platform.");
-        } else if (exception.getStatusCode() == SmsRetrieverStatusCodes.API_NOT_AVAILABLE) {
-            mProvider.onMethodNotAvailable();
-            Log.d(TAG, "not the default browser.");
-        } else if (exception.getStatusCode() == SmsRetrieverStatusCodes.USER_PERMISSION_REQUIRED) {
-            mProvider.onCancel();
-            Log.d(TAG, "user permission is required.");
-        } else if (exception.getStatusCode() == CommonStatusCodes.RESOLUTION_REQUIRED) {
-            if (exception instanceof ResolvableApiException) {
-                // This occurs if the default browser is in NONE permission
-                // state. Resolve it by calling PendingIntent.send() method.
-                // This shows the consent dialog to user so they grant
-                // one-time permission. The dialog result will be received
-                // via `onPermissionDone()`
-                ResolvableApiException rex = (ResolvableApiException) exception;
-                try {
-                    PendingIntent resolutionIntent = rex.getResolution();
-                    window.showIntent(resolutionIntent, new WindowAndroid.IntentCallback() {
-                        @Override
-                        public void onIntentCompleted(
-                                WindowAndroid w, int resultCode, Intent data) {
-                            onPermissionDone(w, resultCode);
-                        }
-                    }, null);
-                } catch (Exception ex) {
-                    Log.e(TAG, "Cannot launch user permission", ex);
-                }
-            }
-        } else {
-            Log.w(TAG, "Unexpected exception", e);
-        }
     }
 
     public void listen(WindowAndroid window) {
         Wrappers.SmsRetrieverClientWrapper client = mProvider.getClient();
-        Task<Void> task = client.startSmsCodeBrowserRetriever();
-
-        task.addOnFailureListener((Exception e) -> { this.onRetrieverTaskFailure(window, e); });
 
         if (DEBUG) Log.d(TAG, "Installed task");
     }
--- a/content/test/BUILD.gn
+++ b/content/test/BUILD.gn
@@ -2608,7 +2608,6 @@ if (is_android) {
     testonly = true
     sources = content_java_sources_needing_jni
     deps = [
-      "$google_play_services_package:google_play_services_auth_api_phone_java",
       "$google_play_services_package:google_play_services_base_java",
       "$google_play_services_package:google_play_services_basement_java",
       "$google_play_services_package:google_play_services_tasks_java",
--- a/remoting/android/java/src/org/chromium/chromoting/OAuthTokenConsumer.java
+++ b/remoting/android/java/src/org/chromium/chromoting/OAuthTokenConsumer.java
@@ -8,9 +8,6 @@ import android.content.Context;
 import android.os.Handler;
 import android.os.Looper;
 
-import com.google.android.gms.auth.GoogleAuthException;
-import com.google.android.gms.auth.GoogleAuthUtil;
-
 import org.chromium.chromoting.base.OAuthTokenFetcher;
 
 import java.io.IOException;
@@ -96,7 +93,6 @@ public class OAuthTokenConsumer {
     public void revokeLatestToken(final OAuthTokenFetcher.Callback callback) {
         OAuthTokenFetcher.TASK_RUNNER.postTask(() -> {
             try {
-                GoogleAuthUtil.clearToken(mContext, mLatestToken);
                 mLatestToken = null;
                 if (callback != null) {
                     new Handler(Looper.getMainLooper()).post(new Runnable() {
@@ -106,11 +102,6 @@ public class OAuthTokenConsumer {
                         }
                     });
                 }
-            } catch (GoogleAuthException e) {
-                if (callback != null) {
-                    handleErrorOnMainThread(callback, OAuthTokenFetcher.Error.UNEXPECTED);
-                    callback.onError(OAuthTokenFetcher.Error.UNEXPECTED);
-                }
             } catch (IOException e) {
                 if (callback != null) {
                     handleErrorOnMainThread(callback, OAuthTokenFetcher.Error.NETWORK);
--- a/remoting/android/java/src/org/chromium/chromoting/base/OAuthTokenFetcher.java
+++ b/remoting/android/java/src/org/chromium/chromoting/base/OAuthTokenFetcher.java
@@ -12,10 +12,6 @@ import android.os.Looper;
 
 import androidx.annotation.IntDef;
 
-import com.google.android.gms.auth.GoogleAuthException;
-import com.google.android.gms.auth.GoogleAuthUtil;
-import com.google.android.gms.auth.UserRecoverableAuthException;
-
 import org.chromium.base.task.PostTask;
 import org.chromium.base.task.TaskRunner;
 import org.chromium.base.task.TaskTraits;
@@ -107,21 +103,6 @@ public class OAuthTokenFetcher {
 
     private void fetchImpl(final String expiredToken) {
         TASK_RUNNER.postTask(() -> {
-            try {
-                if (expiredToken != null) {
-                    GoogleAuthUtil.clearToken(mContext, expiredToken);
-                }
-
-                Account account = new Account(mAccountName, GoogleAuthUtil.GOOGLE_ACCOUNT_TYPE);
-                String token = GoogleAuthUtil.getToken(mContext, account, mTokenScope);
-                handleTokenReceived(token);
-            } catch (IOException ioException) {
-                handleError(Error.NETWORK);
-            } catch (UserRecoverableAuthException recoverableException) {
-                handleRecoverableException(recoverableException);
-            } catch (GoogleAuthException fatalException) {
-                handleError(Error.UNEXPECTED);
-            }
         });
     }
 
@@ -142,20 +123,4 @@ public class OAuthTokenFetcher {
             }
         });
     }
-
-    private void handleRecoverableException(final UserRecoverableAuthException exception) {
-        if (!(mContext instanceof Activity)) {
-            handleError(Error.UI);
-            return;
-        }
-        handleError(Error.INTERRUPTED);
-        final Activity activity = (Activity) mContext;
-        activity.runOnUiThread(new Runnable() {
-            @Override
-            public void run() {
-                activity.startActivityForResult(exception.getIntent(),
-                        REQUEST_CODE_RECOVER_FROM_OAUTH_ERROR);
-            }
-        });
-    }
 }
--- a/content/public/android/java/src/org/chromium/content/browser/sms/SmsProviderGms.java
+++ b/content/public/android/java/src/org/chromium/content/browser/sms/SmsProviderGms.java
@@ -129,9 +129,7 @@ public class SmsProviderGms {
         if (mClient != null) {
             return mClient;
         }
-        mClient = new Wrappers.SmsRetrieverClientWrapper(
-                mUserConsentReceiver != null ? mUserConsentReceiver.createClient() : null,
-                mVerificationReceiver != null ? mVerificationReceiver.createClient() : null);
+        mClient = new Wrappers.SmsRetrieverClientWrapper();
 
         return mClient;
     }
@@ -153,4 +151,4 @@ public class SmsProviderGms {
         void onTimeout(long nativeSmsProviderGms);
         void onCancel(long nativeSmsProviderGms);
     }
-}
\ No newline at end of file
+}
